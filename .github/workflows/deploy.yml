name: Deploy to VPS Hostinger

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  VPS_HOST: '82.25.69.57'
  VPS_USER: 'root'
  APP_DIR: '/opt/supabase-baas'

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to VPS
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ env.VPS_HOST }}
        username: ${{ env.VPS_USER }}
        password: ${{ secrets.VPS_PASSWORD }}
        port: 22
        timeout: 600s
        command_timeout: 600s
        script: |
          # Fun√ß√£o de log
          log() {
            echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1"
          }
          
          # ====================================
          # ETAPA 1: PREPARAR AMBIENTE
          # ====================================
          log "üöÄ INICIANDO DEPLOY - ETAPA 1: Preparando ambiente..."
          
          # Configura√ß√µes
          APP_DIR="${{ env.APP_DIR }}"
          REPO_URL="https://github.com/fernandinhomartins40/backsupa.git"
          
          # Criar diret√≥rio e navegar
          mkdir -p $APP_DIR
          cd $APP_DIR
          
          # Parar containers existentes ANTES de qualquer outra opera√ß√£o
          log "‚èπÔ∏è Parando containers existentes..."
          if [ -f "docker/docker-compose.production.yml" ]; then
            docker compose -f docker/docker-compose.production.yml down --remove-orphans || true
          fi
          
          # ====================================
          # ETAPA 2: BAIXAR/ATUALIZAR C√ìDIGO
          # ====================================
          log "üöÄ ETAPA 2: Baixando c√≥digo..."
          
          # Se n√£o existe reposit√≥rio, clonar
          if [ ! -d ".git" ]; then
            log "üì• Clonando reposit√≥rio..."
            git clone $REPO_URL . || {
              log "‚ùå Clone falhou, usando download direto..."
              curl -L https://github.com/fernandinhomartins40/backsupa/archive/main.tar.gz | tar xz --strip-components=1
            }
          else
            # Atualizar reposit√≥rio existente
            log "üîÑ Atualizando reposit√≥rio..."
            git fetch origin && git reset --hard origin/main && git clean -fd
          fi
          
          # Verificar se baixou corretamente
          if [ ! -f "docker/docker-compose.production.yml" ]; then
            log "‚ùå Arquivo docker-compose.production.yml n√£o encontrado!"
            exit 1
          fi
          log "‚úÖ C√≥digo baixado com sucesso"
          
          # ====================================
          # ETAPA 3: INSTALAR DEPEND√äNCIAS
          # ====================================
          log "üöÄ ETAPA 3: Verificando/instalando depend√™ncias..."
          
          # Atualizar sistema
          apt-get update -qq
          
          # Instalar Docker se necess√°rio
          if ! command -v docker >/dev/null 2>&1; then
            log "üì¶ Instalando Docker..."
            curl -fsSL https://get.docker.com | sh
            systemctl start docker
            systemctl enable docker
          else
            log "‚úÖ Docker j√° instalado"
          fi
          
          # Verificar Docker Compose
          if ! docker compose version >/dev/null 2>&1; then
            log "üì¶ Instalando Docker Compose..."
            apt-get install -y docker-compose-plugin
          else
            log "‚úÖ Docker Compose j√° instalado"
          fi
          
          # ====================================
          # ETAPA 4: LIMPEZA PR√â-BUILD
          # ====================================
          log "üöÄ ETAPA 4: Limpando ambiente..."
          
          # Limpar containers antigos
          docker system prune -af --volumes || true
          
          # ====================================
          # ETAPA 5: BUILD E DEPLOY
          # ====================================
          log "üöÄ ETAPA 5: Fazendo build e iniciando containers..."
          
          # Iniciar aplica√ß√£o
          docker compose -f docker/docker-compose.production.yml up -d --build
          
          # ====================================
          # ETAPA 6: VERIFICA√á√ïES
          # ====================================
          log "üöÄ ETAPA 6: Verificando deployment..."
          
          # Aguardar containers iniciarem
          log "‚è≥ Aguardando containers iniciarem..."
          sleep 45
          
          # Verificar status dos containers
          log "üìã Status dos containers:"
          docker compose -f docker/docker-compose.production.yml ps
          
          # Health checks b√°sicos
          log "üè• Executando health checks..."
          
          # Verificar se containers est√£o rodando
          FAILED_SERVICES=""
          
          EXPECTED_CONTAINERS="supabase_master_db supabase_control_api supabase_billing_api supabase_marketplace_api supabase_nginx"
          for container in $EXPECTED_CONTAINERS; do
            if docker ps --format "{{.Names}}" | grep -q "^$container$"; then
              log "‚úÖ Container $container est√° rodando"
            else
              log "‚ùå Container $container N√ÉO est√° rodando"
              FAILED_SERVICES="$FAILED_SERVICES $container"
            fi
          done
          
          # Testar endpoints b√°sicos
          sleep 15
          
          if curl -f http://localhost/health >/dev/null 2>&1; then
            log "‚úÖ Nginx health check: OK"
          else
            log "‚ùå Nginx health check: FALHOU"
            FAILED_SERVICES="$FAILED_SERVICES nginx-health"
          fi
          
          # ====================================
          # ETAPA 7: RESULTADO FINAL
          # ====================================
          if [ -n "$FAILED_SERVICES" ]; then
            log "‚ùå DEPLOY COM PROBLEMAS. Servi√ßos com falha:$FAILED_SERVICES"
            log "üìã Logs dos containers:"
            docker compose -f docker/docker-compose.production.yml logs --tail=20
            exit 1
          else
            log "üéâ DEPLOY CONCLU√çDO COM SUCESSO!"
            log "üåê Aplica√ß√£o dispon√≠vel em:"
            log "   - http://${{ env.VPS_HOST }} (Nginx)"
            log "   - http://${{ env.VPS_HOST }}:3001 (Control API)"
            log "   - http://${{ env.VPS_HOST }}:3002 (Billing API)"
            log "   - http://${{ env.VPS_HOST }}:3003 (Marketplace API)"
            log "üìä Resumo: $(docker ps --format '{{.Names}}' | wc -l) containers ativos"
          fi