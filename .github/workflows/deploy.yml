name: Deploy to VPS Hostinger

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  VPS_HOST: '82.25.69.57'
  VPS_USER: 'root'
  APP_DIR: '/opt/supabase-baas'

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy via SSH
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ env.VPS_HOST }}
        username: ${{ env.VPS_USER }}
        password: ${{ secrets.VPS_PASSWORD }}
        port: 22
        timeout: 300s
        command_timeout: 300s
        script: |
          set -e  # Exit on any error
          
          echo "🚀 Iniciando deploy do Supabase BaaS..."
          
          # Configurar diretório do projeto
          APP_DIR="${{ env.APP_DIR }}"
          
          # Função de log
          log() {
            echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1"
          }
          
          log "📁 Preparando diretório: $APP_DIR"
          mkdir -p $APP_DIR
          cd $APP_DIR
          
          # Verificar se é um repositório git, se não, clonar
          if [ ! -d ".git" ]; then
            log "📥 Clonando repositório..."
            git clone https://github.com/fernandinhomartins40/backsupa.git .
          fi
          
          # Parar containers existentes
          log "⏹️ Parando containers existentes..."
          docker compose -f docker/docker-compose.production.yml down --remove-orphans || true
          
          # Backup da versão anterior (opcional)
          if [ -d "backup" ]; then
            rm -rf backup.old || true
            mv backup backup.old || true
          fi
          mkdir -p backup
          
          # Atualizar código
          log "🔄 Atualizando código..."
          git config --global --add safe.directory $APP_DIR
          git fetch origin
          git reset --hard origin/main
          git clean -fd
          
          # Verificar dependências
          log "🔍 Verificando dependências..."
          
          # Instalar Docker se não existir
          if ! command -v docker &> /dev/null; then
            log "📦 Instalando Docker..."
            curl -fsSL https://get.docker.com -o get-docker.sh
            sh get-docker.sh
            systemctl start docker
            systemctl enable docker
            usermod -aG docker $USER
          fi
          
          # Verificar Docker Compose
          if ! docker compose version &> /dev/null; then
            log "📦 Docker Compose não encontrado. Tentando instalar plugin..."
            apt-get update
            apt-get install -y docker-compose-plugin
          fi
          
          # Verificar se docker-compose de produção existe
          if [ ! -f "docker/docker-compose.production.yml" ]; then
            log "❌ Arquivo docker/docker-compose.production.yml não encontrado!"
            exit 1
          fi
          
          # Verificar se arquivos necessários existem
          log "🔍 Verificando arquivos necessários..."
          
          REQUIRED_FILES="docker/control-api/Dockerfile docker/billing-system/billing-api/Dockerfile docker/billing-system/marketplace/Dockerfile docker/nginx-config/nginx.conf"
          for file in $REQUIRED_FILES; do
            if [ ! -f "$file" ]; then
              log "❌ Arquivo necessário não encontrado: $file"
              exit 1
            fi
          done
          
          # Configurar permissões
          chmod +x docker/scripts/*.sh 2>/dev/null || true
          chmod +x scripts/deploy/*.sh 2>/dev/null || true
          
          # Limpar containers e imagens antigas
          log "🧹 Limpando containers antigos..."
          docker system prune -f --volumes || true
          
          # Iniciar aplicação
          log "🚀 Iniciando aplicação..."
          COMPOSE_FILE="docker/docker-compose.production.yml"
          
          docker compose -f $COMPOSE_FILE up -d --build --remove-orphans
          
          # Aguardar containers iniciarem
          log "⏳ Aguardando containers iniciarem..."
          sleep 30
          
          # Verificar status
          log "✅ Verificando status dos containers..."
          docker compose -f $COMPOSE_FILE ps
          
          # Health checks
          log "🏥 Executando health checks..."
          
          # Verificar se containers estão rodando
          FAILED_SERVICES=""
          
          for service in supabase_master_db supabase_control_api supabase_billing_api supabase_marketplace_api supabase_nginx; do
            if ! docker ps --format "{{.Names}}" | grep -q "^$service$"; then
              FAILED_SERVICES="$FAILED_SERVICES $service"
              log "❌ Serviço $service não está rodando"
            else
              log "✅ Serviço $service está rodando"
            fi
          done
          
          # Verificar endpoints
          sleep 10
          
          # Test nginx
          if curl -f http://localhost/health >/dev/null 2>&1; then
            log "✅ Nginx: Respondendo"
          else
            log "❌ Nginx: Não está respondendo"
            FAILED_SERVICES="$FAILED_SERVICES nginx"
          fi
          
          # Test control API
          if curl -f http://localhost:3001/health >/dev/null 2>&1; then
            log "✅ Control API: Respondendo"
          else
            log "❌ Control API: Não está respondendo"
            FAILED_SERVICES="$FAILED_SERVICES control-api"
          fi
          
          # Test billing API (assumindo endpoint similar)
          if curl -f http://localhost:3002/health >/dev/null 2>&1; then
            log "✅ Billing API: Respondendo"
          else
            log "❌ Billing API: Não está respondendo"
            FAILED_SERVICES="$FAILED_SERVICES billing-api"
          fi
          
          # Test marketplace API (assumindo endpoint similar) 
          if curl -f http://localhost:3003/health >/dev/null 2>&1; then
            log "✅ Marketplace API: Respondendo"
          else
            log "❌ Marketplace API: Não está respondendo"
            FAILED_SERVICES="$FAILED_SERVICES marketplace-api"
          fi
          
          # Mostrar logs se houver falhas
          if [ -n "$FAILED_SERVICES" ]; then
            log "❌ Serviços com falha:$FAILED_SERVICES"
            log "📋 Últimos logs dos containers:"
            docker compose -f $COMPOSE_FILE logs --tail=20
            
            log "🔄 Tentativa de restart dos serviços com falha..."
            docker compose -f $COMPOSE_FILE restart
            sleep 20
            
            # Verificar novamente
            docker compose -f $COMPOSE_FILE ps
          else
            log "🎉 Deploy concluído com sucesso!"
            log "🌐 Acesse: http://${{ env.VPS_HOST }}"
            log "🔧 Control API: http://${{ env.VPS_HOST }}:3001"
            log "💳 Billing API: http://${{ env.VPS_HOST }}:3002"
            log "🏪 Marketplace API: http://${{ env.VPS_HOST }}:3003"
          fi
          
          # Log final
          log "📊 Resumo do Deploy:"
          echo "- Host: ${{ env.VPS_HOST }}"
          echo "- Diretório: $APP_DIR"
          echo "- Containers ativos: $(docker ps --format '{{.Names}}' | wc -l)"
          echo "- Data: $(date)"
          
          log "✨ Deploy finalizado!"