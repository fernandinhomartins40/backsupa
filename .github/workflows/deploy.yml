name: Deploy to VPS Hostinger

on:
  push:
    branches: [ main, production ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  NODE_VERSION: '20'
  VPS_HOST: '82.25.69.57'
  VPS_USER: 'root'
  APP_DIR: '/opt/supabase-baas'
  DEPLOY_ENV: ${{ github.ref == 'refs/heads/production' && 'production' || 'staging' }}

jobs:
  # Job 1: Build das aplicações
  build:
    runs-on: ubuntu-latest
    
    outputs:
      build-hash: ${{ steps.hash.outputs.hash }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: |
        npm ci
        npm run build

    - name: Build Studio
      run: |
        cd apps/studio
        npm run build
        npm run export
        
    - name: Build Documentation
      run: |
        cd apps/docs
        npm run build
        
    - name: Build WWW Site
      run: |
        cd apps/www
        npm run build

    - name: Generate build hash
      id: hash
      run: echo "hash=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

    - name: Create deployment package
      run: |
        # Criar diretório de deploy
        mkdir -p deploy-package
        
        # Copiar aplicações buildadas
        cp -r apps/studio/out deploy-package/studio
        cp -r apps/docs/.next deploy-package/docs
        cp -r apps/www/.next deploy-package/www
        
        # Copiar APIs
        cp -r docker/control-api deploy-package/
        cp -r docker/billing-system deploy-package/
        
        # Copiar configurações Docker
        cp -r docker deploy-package/
        
        # Copiar scripts
        cp -r scripts deploy-package/
        
        # Copiar arquivos de configuração
        cp package*.json deploy-package/
        cp turbo.json deploy-package/
        
        # Criar arquivo de informações do deploy
        echo "BUILD_HASH=${GITHUB_SHA::8}" > deploy-package/build-info
        echo "BUILD_DATE=$(date -u +%Y-%m-%dT%H:%M:%SZ)" >> deploy-package/build-info
        echo "DEPLOY_ENV=${DEPLOY_ENV}" >> deploy-package/build-info
        echo "BRANCH=${GITHUB_REF_NAME}" >> deploy-package/build-info

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: deployment-package-${{ steps.hash.outputs.hash }}
        path: deploy-package/
        retention-days: 7

  # Job 2: Deploy para VPS
  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/production'
    
    environment:
      name: ${{ github.ref == 'refs/heads/production' && 'production' || 'staging' }}
      url: https://${{ github.ref == 'refs/heads/production' && 'app' || 'staging' }}.yourdomain.com
    
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: deployment-package-${{ needs.build.outputs.build-hash }}
        path: deployment-package/

    - name: Setup SSH Key
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.VPS_PASSWORD }}" > ~/.ssh/password
        chmod 600 ~/.ssh/password
        
        # Adicionar host à lista de conhecidos
        ssh-keyscan -H ${{ env.VPS_HOST }} >> ~/.ssh/known_hosts

    - name: Test SSH Connection
      run: |
        sshpass -f ~/.ssh/password ssh -o StrictHostKeyChecking=no ${{ env.VPS_USER }}@${{ env.VPS_HOST }} "echo 'SSH Connection successful'"

    - name: Prepare VPS Environment
      run: |
        sshpass -f ~/.ssh/password ssh -o StrictHostKeyChecking=no ${{ env.VPS_USER }}@${{ env.VPS_HOST }} '
          # Update system
          apt-get update
          
          # Install required packages
          apt-get install -y docker.io docker-compose-plugin curl jq openssl nginx sshpass
          
          # Install Node.js 20
          curl -fsSL https://deb.nodesource.com/setup_20.x | bash -
          apt-get install -y nodejs
          
          # Enable Docker
          systemctl enable docker
          systemctl start docker
          
          # Add user to docker group
          usermod -aG docker $USER || true
          
          # Create application directory
          mkdir -p ${{ env.APP_DIR }}
          mkdir -p ${{ env.APP_DIR }}/backups
          mkdir -p /opt/supabase-instances
          mkdir -p /var/log/supabase-baas
          
          # Set permissions
          chown -R $USER:$USER ${{ env.APP_DIR }}
          chmod -R 755 ${{ env.APP_DIR }}
        '

    - name: Upload Application Files
      run: |
        # Compactar arquivos para transfer mais eficiente
        tar -czf deployment.tar.gz -C deployment-package .
        
        # Upload do pacote
        sshpass -f ~/.ssh/password scp -o StrictHostKeyChecking=no deployment.tar.gz ${{ env.VPS_USER }}@${{ env.VPS_HOST }}:${{ env.APP_DIR }}/
        
        # Extrair no servidor
        sshpass -f ~/.ssh/password ssh -o StrictHostKeyChecking=no ${{ env.VPS_USER }}@${{ env.VPS_HOST }} '
          cd ${{ env.APP_DIR }}
          
          # Backup da versão anterior se existir
          if [ -d "current" ]; then
            mv current backup-$(date +%Y%m%d-%H%M%S) || true
          fi
          
          # Extrair nova versão
          mkdir -p current
          tar -xzf deployment.tar.gz -C current/
          rm deployment.tar.gz
          
          # Set permissions
          chown -R $USER:$USER current/
          chmod +x current/docker/scripts/*.sh || true
          chmod +x current/scripts/*.sh || true
        '

    - name: Configure Environment Variables
      run: |
        sshpass -f ~/.ssh/password ssh -o StrictHostKeyChecking=no ${{ env.VPS_USER }}@${{ env.VPS_HOST }} '
          cd ${{ env.APP_DIR }}/current
          
          # Create main environment file
          cat > .env << EOF
          # Deployment Info
          BUILD_HASH=${{ needs.build.outputs.build-hash }}
          DEPLOY_ENV=${{ env.DEPLOY_ENV }}
          DEPLOY_DATE=$(date -u +%Y-%m-%dT%H:%M:%SZ)
          
          # Server Configuration
          SERVER_HOST=${{ env.VPS_HOST }}
          APP_URL=https://${{ env.DEPLOY_ENV == 'production' && 'app' || 'staging' }}.yourdomain.com
          API_URL=https://api.${{ env.DEPLOY_ENV == 'production' && 'app' || 'staging' }}.yourdomain.com
          
          # Master Database
          MASTER_DB_HOST=localhost
          MASTER_DB_PORT=5432
          MASTER_DB_NAME=supabase_master
          MASTER_DB_USER=postgres
          MASTER_DB_PASSWORD=$(openssl rand -base64 32)
          MASTER_DB_URL=postgresql://\${MASTER_DB_USER}:\${MASTER_DB_PASSWORD}@\${MASTER_DB_HOST}:\${MASTER_DB_PORT}/\${MASTER_DB_NAME}
          
          # JWT Configuration
          JWT_SECRET=$(openssl rand -base64 64)
          
          # Control API
          CONTROL_API_PORT=3001
          CONTROL_API_JWT_SECRET=$(openssl rand -base64 32)
          
          # Billing API
          BILLING_API_PORT=3002
          STRIPE_SECRET_KEY=sk_test_your_stripe_secret_key
          STRIPE_WEBHOOK_SECRET=whsec_your_webhook_secret
          
          # Marketplace API
          MARKETPLACE_API_PORT=3003
          
          # Monitoring
          PROMETHEUS_PORT=9090
          GRAFANA_PORT=3000
          GRAFANA_ADMIN_PASSWORD=$(openssl rand -base64 16)
          
          # Nginx
          NGINX_PORT=80
          NGINX_SSL_PORT=443
          
          # CORS
          CORS_ORIGINS=https://yourdomain.com,https://www.yourdomain.com
          
          # Email (opcional)
          SMTP_HOST=smtp.gmail.com
          SMTP_PORT=587
          SMTP_USER=your-email@gmail.com
          SMTP_PASSWORD=your-app-password
          
          # Rate Limiting
          RATE_LIMIT_WINDOW_MS=900000
          RATE_LIMIT_MAX_REQUESTS=100
          RATE_LIMIT_AUTH_MAX_REQUESTS=5
          
          # Logging
          LOG_LEVEL=info
          ENABLE_METRICS=true
          
          # Trust Proxy (for Nginx)
          TRUST_PROXY=true
          EOF
          
          # Set secure permissions
          chmod 600 .env
        '

    - name: Setup Database and Services
      run: |
        sshpass -f ~/.ssh/password ssh -o StrictHostKeyChecking=no ${{ env.VPS_USER }}@${{ env.VPS_HOST }} '
          cd ${{ env.APP_DIR }}/current
          
          # Create master database docker-compose
          cat > docker-compose.master.yml << EOF
          version: "3.8"
          
          services:
            master-db:
              image: postgres:15.1
              container_name: supabase_master_db
              restart: unless-stopped
              environment:
                POSTGRES_DB: supabase_master
                POSTGRES_USER: postgres
                POSTGRES_PASSWORD: \${MASTER_DB_PASSWORD}
                POSTGRES_HOST_AUTH_METHOD: trust
              volumes:
                - master_db_data:/var/lib/postgresql/data
                - ./docker/master-db/init:/docker-entrypoint-initdb.d
              ports:
                - "5432:5432"
              networks:
                - supabase_network
              healthcheck:
                test: ["CMD-SHELL", "pg_isready -U postgres"]
                interval: 30s
                timeout: 10s
                retries: 3
          
            # Nginx Proxy
            nginx:
              image: nginx:alpine
              container_name: supabase_nginx
              restart: unless-stopped
              ports:
                - "80:80"
                - "443:443"
              volumes:
                - ./nginx/nginx.conf:/etc/nginx/nginx.conf
                - ./nginx/sites-enabled:/etc/nginx/sites-enabled
                - nginx_ssl:/etc/ssl/certs
              networks:
                - supabase_network
              depends_on:
                - control-api
                - billing-api
                - marketplace-api
          
            # Control API
            control-api:
              build:
                context: ./control-api
                dockerfile: Dockerfile
              container_name: supabase_control_api
              restart: unless-stopped
              environment:
                - NODE_ENV=\${DEPLOY_ENV}
                - PORT=3001
                - MASTER_DB_URL=\${MASTER_DB_URL}
                - JWT_SECRET=\${CONTROL_API_JWT_SECRET}
                - CORS_ORIGINS=\${CORS_ORIGINS}
              ports:
                - "3001:3001"
              networks:
                - supabase_network
              depends_on:
                - master-db
              healthcheck:
                test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
                interval: 30s
                timeout: 10s
                retries: 3
          
            # Billing API
            billing-api:
              build:
                context: ./billing-system/billing-api
                dockerfile: Dockerfile
              container_name: supabase_billing_api
              restart: unless-stopped
              environment:
                - NODE_ENV=\${DEPLOY_ENV}
                - PORT=3002
                - MASTER_DB_URL=\${MASTER_DB_URL}
                - STRIPE_SECRET_KEY=\${STRIPE_SECRET_KEY}
                - STRIPE_WEBHOOK_SECRET=\${STRIPE_WEBHOOK_SECRET}
              ports:
                - "3002:3002"
              networks:
                - supabase_network
              depends_on:
                - master-db
          
            # Marketplace API
            marketplace-api:
              build:
                context: ./billing-system/marketplace
                dockerfile: Dockerfile
              container_name: supabase_marketplace_api
              restart: unless-stopped
              environment:
                - NODE_ENV=\${DEPLOY_ENV}
                - PORT=3003
                - MASTER_DB_URL=\${MASTER_DB_URL}
              ports:
                - "3003:3003"
              networks:
                - supabase_network
              depends_on:
                - master-db
          
          volumes:
            master_db_data:
              driver: local
            nginx_ssl:
              driver: local
          
          networks:
            supabase_network:
              driver: bridge
          EOF
        '

    - name: Create Dockerfiles
      run: |
        sshpass -f ~/.ssh/password ssh -o StrictHostKeyChecking=no ${{ env.VPS_USER }}@${{ env.VPS_HOST }} '
          cd ${{ env.APP_DIR }}/current
          
          # Control API Dockerfile
          mkdir -p control-api
          cat > control-api/Dockerfile << EOF
          FROM node:20-alpine
          WORKDIR /app
          COPY package*.json ./
          RUN npm ci --production
          COPY . .
          EXPOSE 3001
          CMD ["node", "server.js"]
          EOF
          
          # Billing API Dockerfile
          mkdir -p billing-system/billing-api
          cat > billing-system/billing-api/Dockerfile << EOF
          FROM node:20-alpine
          WORKDIR /app
          COPY package*.json ./
          RUN npm ci --production
          COPY . .
          EXPOSE 3002
          CMD ["node", "server.js"]
          EOF
          
          # Marketplace API Dockerfile
          mkdir -p billing-system/marketplace
          cat > billing-system/marketplace/Dockerfile << EOF
          FROM node:20-alpine
          WORKDIR /app
          COPY package*.json ./
          RUN npm ci --production
          COPY . .
          EXPOSE 3003
          CMD ["node", "marketplace-api.js"]
          EOF
        '

    - name: Configure Nginx
      run: |
        sshpass -f ~/.ssh/password ssh -o StrictHostKeyChecking=no ${{ env.VPS_USER }}@${{ env.VPS_HOST }} '
          cd ${{ env.APP_DIR }}/current
          
          # Create nginx directory
          mkdir -p nginx/sites-enabled
          
          # Main nginx.conf
          cat > nginx/nginx.conf << EOF
          user nginx;
          worker_processes auto;
          error_log /var/log/nginx/error.log warn;
          pid /var/run/nginx.pid;
          
          events {
              worker_connections 1024;
          }
          
          http {
              include /etc/nginx/mime.types;
              default_type application/octet-stream;
              
              log_format main '\$remote_addr - \$remote_user [\$time_local] "\$request" '
                              '\$status \$body_bytes_sent "\$http_referer" '
                              '"\$http_user_agent" "\$http_x_forwarded_for"';
              
              access_log /var/log/nginx/access.log main;
              
              sendfile on;
              tcp_nopush on;
              tcp_nodelay on;
              keepalive_timeout 65;
              types_hash_max_size 2048;
              
              # Gzip compression
              gzip on;
              gzip_vary on;
              gzip_min_length 10240;
              gzip_proxied expired no-cache no-store private must-revalidate auth;
              gzip_types text/plain text/css text/xml text/javascript application/x-javascript application/xml+rss application/javascript;
              
              # Rate limiting
              limit_req_zone \$binary_remote_addr zone=api:10m rate=30r/m;
              limit_req_zone \$binary_remote_addr zone=auth:10m rate=5r/m;
              
              # SSL configuration
              ssl_protocols TLSv1.2 TLSv1.3;
              ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384;
              ssl_prefer_server_ciphers off;
              
              include /etc/nginx/sites-enabled/*;
          }
          EOF
          
          # Site configuration
          cat > nginx/sites-enabled/supabase-baas << EOF
          # API Upstream
          upstream control_api {
              server control-api:3001;
          }
          
          upstream billing_api {
              server billing-api:3002;
          }
          
          upstream marketplace_api {
              server marketplace-api:3003;
          }
          
          # Main server block
          server {
              listen 80;
              server_name ${{ env.VPS_HOST }} *.yourdomain.com;
              
              # Security headers
              add_header X-Frame-Options DENY;
              add_header X-Content-Type-Options nosniff;
              add_header X-XSS-Protection "1; mode=block";
              
              # API routes
              location /api/control {
                  limit_req zone=api burst=10 nodelay;
                  proxy_pass http://control_api;
                  proxy_set_header Host \$host;
                  proxy_set_header X-Real-IP \$remote_addr;
                  proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto \$scheme;
              }
              
              location /api/billing {
                  limit_req zone=api burst=10 nodelay;
                  proxy_pass http://billing_api;
                  proxy_set_header Host \$host;
                  proxy_set_header X-Real-IP \$remote_addr;
                  proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto \$scheme;
              }
              
              location /api/marketplace {
                  limit_req zone=api burst=10 nodelay;
                  proxy_pass http://marketplace_api;
                  proxy_set_header Host \$host;
                  proxy_set_header X-Real-IP \$remote_addr;
                  proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto \$scheme;
              }
              
              # Static files
              location /static/ {
                  alias /var/www/static/;
                  expires 1y;
                  add_header Cache-Control "public, immutable";
              }
              
              # Health check
              location /health {
                  access_log off;
                  return 200 "healthy\n";
                  add_header Content-Type text/plain;
              }
              
              # Default location
              location / {
                  return 200 "Supabase BaaS - ${{ env.DEPLOY_ENV }} - Build ${{ needs.build.outputs.build-hash }}";
                  add_header Content-Type text/plain;
              }
          }
          EOF
        '

    - name: Deploy Application
      run: |
        sshpass -f ~/.ssh/password ssh -o StrictHostKeyChecking=no ${{ env.VPS_USER }}@${{ env.VPS_HOST }} '
          cd ${{ env.APP_DIR }}/current
          
          # Load environment variables
          export $(cat .env | xargs)
          
          # Stop existing containers
          docker-compose -f docker-compose.master.yml down || true
          
          # Pull latest images
          docker-compose -f docker-compose.master.yml pull || true
          
          # Build and start services
          docker-compose -f docker-compose.master.yml up --build -d
          
          # Wait for services to be healthy
          echo "Waiting for services to be ready..."
          sleep 30
          
          # Initialize database
          if [ -f "docker/master-db/init/master-db-setup.sql" ]; then
            docker exec supabase_master_db psql -U postgres -d supabase_master -f /docker-entrypoint-initdb.d/master-db-setup.sql || true
          fi
          
          # Run migrations if needed
          if [ -f "docker/billing-system/billing-schema.sql" ]; then
            docker exec supabase_master_db psql -U postgres -d supabase_master -f /docker-entrypoint-initdb.d/billing-schema.sql || true
          fi
          
          # Check service health
          echo "Checking service health..."
          docker-compose -f docker-compose.master.yml ps
          
          # Test API endpoints
          curl -f http://localhost:3001/health || echo "Control API not ready"
          curl -f http://localhost:3002/health || echo "Billing API not ready"
          curl -f http://localhost:3003/health || echo "Marketplace API not ready"
        '

    - name: Setup Monitoring (Optional)
      run: |
        sshpass -f ~/.ssh/password ssh -o StrictHostKeyChecking=no ${{ env.VPS_USER }}@${{ env.VPS_HOST }} '
          cd ${{ env.APP_DIR }}/current
          
          # Setup monitoring if monitoring scripts exist
          if [ -f "docker/monitoring/docker-compose.monitoring.yml" ]; then
            echo "Setting up monitoring..."
            docker-compose -f docker/monitoring/docker-compose.monitoring.yml up -d || true
          fi
          
          # Setup cron jobs for maintenance
          (crontab -l 2>/dev/null; echo "0 2 * * * cd ${{ env.APP_DIR }}/current && ./scripts/backup_all_instances.sh") | crontab -
          (crontab -l 2>/dev/null; echo "*/5 * * * * cd ${{ env.APP_DIR }}/current && ./scripts/health_monitor.sh") | crontab -
        '

    - name: Verify Deployment
      run: |
        sshpass -f ~/.ssh/password ssh -o StrictHostKeyChecking=no ${{ env.VPS_USER }}@${{ env.VPS_HOST }} '
          cd ${{ env.APP_DIR }}/current
          
          echo "=== Deployment Verification ==="
          
          # Check Docker services
          echo "Docker containers:"
          docker ps
          
          echo ""
          echo "Docker service logs:"
          docker-compose -f docker-compose.master.yml logs --tail=20
          
          echo ""
          echo "System resources:"
          df -h
          free -h
          
          echo ""
          echo "Network ports:"
          netstat -tlnp | grep -E ":80|:443|:3001|:3002|:3003|:5432"
          
          echo ""
          echo "Service health checks:"
          curl -s http://localhost/health || echo "Nginx: Not responding"
          curl -s http://localhost:3001/health || echo "Control API: Not responding"
          curl -s http://localhost:3002/health || echo "Billing API: Not responding"
          curl -s http://localhost:3003/health || echo "Marketplace API: Not responding"
          
          echo ""
          echo "Deployment completed successfully!"
          echo "Build: ${{ needs.build.outputs.build-hash }}"
          echo "Environment: ${{ env.DEPLOY_ENV }}"
          echo "Date: $(date)"
        '

    - name: Cleanup
      if: always()
      run: |
        rm -f ~/.ssh/password

  # Job 3: Notification
  notify:
    runs-on: ubuntu-latest
    needs: [build, deploy]
    if: always()
    
    steps:
    - name: Notify Deployment Status
      run: |
        if [ "${{ needs.deploy.result }}" == "success" ]; then
          echo "✅ Deployment successful!"
          echo "Environment: ${{ env.DEPLOY_ENV }}"
          echo "Build: ${{ needs.build.outputs.build-hash }}"
          echo "URL: https://${{ env.DEPLOY_ENV == 'production' && 'app' || 'staging' }}.yourdomain.com"
        else
          echo "❌ Deployment failed!"
          echo "Check the logs for details."
        fi