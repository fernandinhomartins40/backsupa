# Template Nginx para Supabase Multi-Tenant BaaS
# Este arquivo deve ser copiado para /etc/nginx/sites-available/supabase-baas

upstream backend_pool {
    # Placeholder - rotas serão gerenciadas dinamicamente via Lua
    server 127.0.0.1:8000 backup;
}

# Rate limiting
limit_req_zone $binary_remote_addr zone=api_limit:10m rate=30r/m;
limit_req_zone $binary_remote_addr zone=auth_limit:10m rate=5r/m;

# Mapa para cache de rotas (melhora performance)
map $subdomain $backend_port {
    default "";
}

server {
    listen 80;
    listen [::]:80;
    server_name ~^(?<subdomain>.+)\.yourdomain\.com$;
    
    # Redirect all HTTP to HTTPS
    return 301 https://$server_name$request_uri;
}

server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name ~^(?<subdomain>.+)\.yourdomain\.com$;

    # SSL Configuration (substitua pelos seus certificados)
    ssl_certificate /etc/ssl/certs/wildcard.yourdomain.com.crt;
    ssl_certificate_key /etc/ssl/private/wildcard.yourdomain.com.key;
    
    # SSL Security Headers
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;

    # Security Headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

    # Configuração de logs
    access_log /var/log/nginx/supabase-baas-access.log;
    error_log /var/log/nginx/supabase-baas-error.log;

    # Tamanho máximo do corpo da requisição (para uploads)
    client_max_body_size 50M;
    
    # Timeouts
    proxy_connect_timeout 60s;
    proxy_send_timeout 60s;
    proxy_read_timeout 60s;

    # Variável para armazenar a porta do backend
    set $backend_port "";
    
    # Resolver dinâmico de rotas via Lua
    access_by_lua_block {
        local json = require "cjson"
        local file = io.open("/opt/supabase-instances/routes.json", "r")
        
        if file then
            local content = file:read("*all")
            file:close()
            
            local success, routes = pcall(json.decode, content)
            if success and routes then
                local subdomain = ngx.var.subdomain
                local port = routes[subdomain]
                
                if port then
                    ngx.var.backend_port = port
                else
                    ngx.log(ngx.ERR, "No route found for subdomain: " .. subdomain)
                    ngx.status = 404
                    ngx.say("Instance not found")
                    ngx.exit(404)
                end
            else
                ngx.log(ngx.ERR, "Failed to parse routes.json")
                ngx.status = 500
                ngx.say("Configuration error")
                ngx.exit(500)
            end
        else
            ngx.log(ngx.ERR, "Cannot open routes.json file")
            ngx.status = 500
            ngx.say("Service unavailable")
            ngx.exit(500)
        end
    }

    # Rate limiting para diferentes endpoints
    location ~ ^/auth/ {
        limit_req zone=auth_limit burst=10 nodelay;
        proxy_pass http://127.0.0.1:$backend_port;
        include /etc/nginx/proxy_params;
    }

    location ~ ^/rest/ {
        limit_req zone=api_limit burst=20 nodelay;
        proxy_pass http://127.0.0.1:$backend_port;
        include /etc/nginx/proxy_params;
    }

    # Configuração principal para todas as outras rotas
    location / {
        # Verificar se backend_port foi definido
        if ($backend_port = "") {
            return 503;
        }

        # Headers de proxy
        proxy_pass http://127.0.0.1:$backend_port;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Host $server_name;
        proxy_cache_bypass $http_upgrade;
        
        # CORS Headers para APIs
        if ($request_method = 'OPTIONS') {
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, PATCH, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'Accept, Authorization, Content-Type, X-Requested-With, apikey, x-client-info' always;
            add_header 'Access-Control-Max-Age' 1728000 always;
            add_header 'Content-Type' 'text/plain charset=UTF-8' always;
            add_header 'Content-Length' 0 always;
            return 204;
        }
    }

    # Health check endpoint
    location /nginx-health {
        access_log off;
        add_header Content-Type text/plain;
        return 200 "nginx-healthy\n";
    }

    # Bloquear acesso direto a arquivos sensíveis
    location ~ /\.(ht|env|git) {
        deny all;
        return 404;
    }
}

# Configuração para websockets (Realtime)
map $http_upgrade $connection_upgrade {
    default upgrade;
    '' close;
}