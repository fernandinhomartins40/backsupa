services:
  # PostgreSQL Master Database
  master-db:
    image: postgres:15.1
    container_name: supabase_master_db
    restart: unless-stopped
    environment:
      POSTGRES_DB: supabase_master
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres123
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5432:5432"
    volumes:
      - master_db_data:/var/lib/postgresql/data
      - ./master-db-setup.sql:/docker-entrypoint-initdb.d/01-setup.sql
      - ./billing-system/billing-schema.sql:/docker-entrypoint-initdb.d/02-billing.sql
    networks:
      - supabase_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Control API
  control-api:
    build:
      context: ./control-api
      dockerfile: Dockerfile
    container_name: supabase_control_api
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - PORT=3001
      - HOST=0.0.0.0
      - DATABASE_URL=postgresql://postgres:postgres123@master-db:5432/supabase_master
      - DB_HOST=master-db
      - DB_PORT=5432
      - DB_NAME=supabase_master
      - DB_USER=postgres
      - DB_PASSWORD=postgres123
    ports:
      - "3001:3001"
    depends_on:
      master-db:
        condition: service_healthy
    networks:
      - supabase_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Admin Dashboard
  admin-dashboard:
    build:
      context: ./admin-dashboard
      dockerfile: Dockerfile
    container_name: supabase_admin_dashboard
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - PORT=4000
      - HOST=0.0.0.0
    ports:
      - "4000:4000"
    depends_on:
      control-api:
        condition: service_healthy
    networks:
      - supabase_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Billing API
  billing-api:
    build:
      context: ./billing-system/billing-api
      dockerfile: Dockerfile
    container_name: supabase_billing_api
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - PORT=3002
      - HOST=0.0.0.0
      - MASTER_DB_URL=postgresql://postgres:postgres123@master-db:5432/supabase_master
    ports:
      - "3002:3002"
    depends_on:
      master-db:
        condition: service_healthy
    networks:
      - supabase_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Marketplace API
  marketplace-api:
    build:
      context: ./billing-system/marketplace
      dockerfile: Dockerfile
    container_name: supabase_marketplace_api
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - PORT=3003
      - HOST=0.0.0.0
      - MASTER_DB_URL=postgresql://postgres:postgres123@master-db:5432/supabase_master
    ports:
      - "3003:3003"
    depends_on:
      master-db:
        condition: service_healthy
    networks:
      - supabase_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3003/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Supabase Studio
  studio:
    container_name: supabase_studio
    image: supabase/studio:20250113-83c9420
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      STUDIO_PG_META_URL: http://meta:8080
      POSTGRES_PASSWORD: postgres123
      DEFAULT_ORGANIZATION_NAME: "Supabase BaaS"
      DEFAULT_PROJECT_NAME: "Production Project"
      SUPABASE_URL: http://localhost:8000
      SUPABASE_PUBLIC_URL: http://82.25.69.57:8000
      NEXT_PUBLIC_ENABLE_LOGS: true
      NEXT_ANALYTICS_BACKEND_PROVIDER: postgres
    depends_on:
      master-db:
        condition: service_healthy
      meta:
        condition: service_healthy
    networks:
      - supabase_network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL Meta (necess√°rio para Studio)
  meta:
    container_name: supabase_meta
    image: supabase/postgres-meta:v0.84.2
    restart: unless-stopped
    environment:
      PG_META_PORT: 8080
      PG_META_DB_HOST: master-db
      PG_META_DB_PORT: 5432
      PG_META_DB_NAME: supabase_master
      PG_META_DB_USER: postgres
      PG_META_DB_PASSWORD: postgres123
    ports:
      - "8080:8080"
    depends_on:
      master-db:
        condition: service_healthy
    networks:
      - supabase_network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Proxy
  nginx:
    build:
      context: ./nginx-config
      dockerfile: Dockerfile
    container_name: supabase_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx-config/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      control-api:
        condition: service_healthy
      billing-api:
        condition: service_healthy
      marketplace-api:
        condition: service_healthy
      admin-dashboard:
        condition: service_healthy
    networks:
      - supabase_network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  master_db_data:
    driver: local

networks:
  supabase_network:
    driver: bridge